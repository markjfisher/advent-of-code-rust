use aoc::aoc2024::day08::*;
use indoc::indoc;
use pretty_assertions::assert_eq;

const EXAMPLE: &str = "\
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............";


const ANTINODES: &str = "\
......#....#
...#........
....#.....#.
..#.........
.........#..
.#....#.....
...#........
#......#....
............
............
..........#.
..........#.";

const EXTENDED_ANTINODES: &str = "\
##....#....#
.#.#....#...
..#.##....#.
..##...#....
....#....#..
.#...##....#
...#..#.....
#....#.#....
..#.....#...
....#....#..
.#........#.
...#......##";

#[test]
fn part1_test() {
    let input = parse(EXAMPLE);
    assert_eq!(part1(&input), 14);
}

#[test]
fn part2_test() {
    let input = parse(EXAMPLE);
    assert_eq!(part2(&input), 34);
}

#[test]
fn can_parse_to_grid() {
    let test_grid_data = indoc! {"\
        ............
        ........0...
        .....0......
        .......0....
        ....0.......
        ......A.....
        ............
        ............
        ........A...
        .........A..
        ............
        ............"};
    let input = parse(test_grid_data);
    assert_eq!(input.to_grid_string(), test_grid_data);
}

#[test]
fn can_find_simple_antinodes() {
    let input = parse(indoc! {"\
        ..........
        ..........
        ..........
        ....a.....
        ..........
        .....a....
        ..........
        ..........
        ..........
        .........."});
    let antinodes = indoc! {"\
        ..........
        ...#......
        ..........
        ..........
        ..........
        ..........
        ..........
        ......#...
        ..........
        .........."};
    assert_eq!(create_antinodes(&input, false).to_grid_string(), antinodes);
}

#[test]
fn can_find_antinodes_with_multiple_values() {
    let input = parse(EXAMPLE);
    assert_eq!(create_antinodes(&input, false).to_grid_string(), ANTINODES);
}

#[test]
fn can_find_extended_antinodes() {
    let input = parse(EXAMPLE);
    assert_eq!(create_antinodes(&input, true).to_grid_string(), EXTENDED_ANTINODES);
}